#include <iostream>
#include <vector>
#include <queue> // Для обхода в ширину
using namespace std;

struct AVLNode {
    int key;
    AVLNode* left;
    AVLNode* right;
    int height;

    AVLNode(int value) : key(value), left(nullptr), right(nullptr), height(1) {}
};

class AVLTree {
public:
    AVLNode* root;

    AVLTree() : root(nullptr) {}

    int height(AVLNode* node) {
        return node ? node->height : 0;
    }

    int getBalance(AVLNode* node) {
        return node ? height(node->left) - height(node->right) : 0;
    }

    AVLNode* rightRotate(AVLNode* y) {
        AVLNode* x = y->left;
        AVLNode* T2 = x->right;

        x->right = y;
        y->left = T2;

        y->height = max(height(y->left), height(y->right)) + 1;
        x->height = max(height(x->left), height(x->right)) + 1;

        return x;
    }

    AVLNode* leftRotate(AVLNode* x) {
        AVLNode* y = x->right;
        AVLNode* T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = max(height(x->left), height(x->right)) + 1;
        y->height = max(height(y->left), height(y->right)) + 1;

        return y;
    }

    AVLNode* insert(AVLNode* node, int key) {
        if (node == nullptr) {
            return new AVLNode(key);
        }

        if (key < node->key) {
            node->left = insert(node->left, key);
        }
        else if (key > node->key) {
            node->right = insert(node->right, key);
        }
        else {
            return node; // Duplicate keys are not allowed
        }

        node->height = 1 + max(height(node->left), height(node->right));

        int balance = getBalance(node);

        // Left Left Case
        if (balance > 1 and key < node->left->key) {
            return rightRotate(node);
        }

        // Right Right Case
        if (balance < -1 and key > node->right->key) {
            return leftRotate(node);
        }

        // Left Right Case
        if (balance > 1 and key > node->left->key) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        // Right Left Case
        if (balance < -1 and key < node->right->key) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    void insertKey(int key) {
        root = insert(root, key);
    }

    int getHeight() {
        return height(root);
    }

    // Обход в глубину (слева)
    void preorder() {
        cout << "Preorder traversal: ";
        preorderRec(root);
        cout << endl;
    }

    // Обход в глубину (симметричный)
    void inorder() {
        cout << "Inorder traversal: ";
        inorderRec(root);
        cout << endl;
    }

    // Обход в глубину (справа)
    void postorder() {
        cout << "Postorder traversal: ";
        postorderRec(root);
        cout << endl;
    }

    // Обход в ширину
    void levelOrder() {
        cout << "Level order traversal: ";
        if (root == nullptr) return;

        queue<AVLNode*> q;
        q.push(root);

        while (!q.empty()) {
            AVLNode* current = q.front();
            q.pop();
            cout << current->key << " ";

            if (current->left != nullptr) {
                q.push(current->left);
            }
            if (current->right != nullptr) {
                q.push(current->right);
            }
        }
        cout << endl;
    }

private:
    void preorderRec(AVLNode* node) {
        if (node == nullptr) return;
        cout << node->key << " ";
        preorderRec(node->left);
        preorderRec(node->right);
    }

    void inorderRec(AVLNode* node) {
        if (node == nullptr)
            return;
        inorderRec(node->left);
        cout << node->key << " ";
        inorderRec(node->right);
    }

    void postorderRec(AVLNode* node) {
        if (node == nullptr)
            return;
        postorderRec(node->left);
        postorderRec(node->right);
        cout << node->key << " ";
    }
};

int main() {
    AVLTree avlTree;

    for (int n = 2; n <= 101; ++n) {
        avlTree.insertKey(n);
        cout << "AVL;" << n << ";" << avlTree.getHeight() << endl;
    }

    avlTree.preorder();
    avlTree.inorder();
    avlTree.postorder();
    avlTree.levelOrder();

    return 0;
}
